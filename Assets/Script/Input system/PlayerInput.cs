//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Script/Input system/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""9ec17256-334b-4d97-a5be-730bdda653a2"",
            ""actions"": [
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""54ca4707-5586-48e3-ae86-fb68f002f115"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""4dd554d0-46c4-4c56-8ddf-a78a84f88c08"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""e90ea7c4-bb76-4028-995b-820031f48751"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""86b5b862-3517-49c3-af09-a0e9928cad7f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""0d5a212f-fa2b-4fb5-b951-87f1f4fc8386"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""131f7474-cbdd-403e-a0ea-f72accffea66"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e7ebbe8-cb6d-4feb-b602-0e86297b0f9c"",
                    ""path"": ""<VirtualMouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c3b3c09-4fee-497d-819d-8a536b225654"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3221cd8d-7750-4cba-b582-e0fd663da3f9"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""631ab5af-dc68-4f81-9ee2-c6d0c3108a1b"",
                    ""path"": ""<VirtualMouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b004b700-fc2e-44fd-bd9c-32590093d3d5"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2908488a-a677-4094-9e13-4a81726a4329"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""252befcd-6d79-41af-abbd-2ef72e29a454"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8692208a-44f6-43a3-adbe-c05991cb88ec"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3458ed2e-aa4b-4d9f-9e10-3c52dca362ce"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81189579-f74c-4428-afa9-752fd9b28bab"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""886a15ff-dcb1-4179-bd57-92a7e0448749"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6d34f54-0927-4bf0-af15-687eea21f1c0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""30f25681-4378-4177-8412-c067ee622b2d"",
            ""actions"": [
                {
                    ""name"": ""Navigate"",
                    ""type"": ""Value"",
                    ""id"": ""a1a6f114-59b2-42e0-ae22-347359283c94"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""NextPage"",
                    ""type"": ""Button"",
                    ""id"": ""567358b8-e4b2-4c38-afc0-b4dd16603393"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrevPage"",
                    ""type"": ""Button"",
                    ""id"": ""50ef81a2-e77c-4884-b8af-bada43fd4b05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Apply"",
                    ""type"": ""Button"",
                    ""id"": ""26f86f5f-af8c-40b3-9db8-37894409d4fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""515d373c-f629-40f5-b488-331a445a3d48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action1"",
                    ""type"": ""Button"",
                    ""id"": ""f1653a16-68fe-4069-a270-069643d5b1b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action2"",
                    ""type"": ""Button"",
                    ""id"": ""90952cb6-c595-496a-85be-f028f0e719b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""65330018-c829-4892-b47a-ea20404b0eb0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9b7069d4-1dcb-4180-975e-1844516af86e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5f9af2d1-9688-492c-815f-00c549d42b3f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""497225c1-1b53-4119-adf4-5e080d7695b5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b9efedc6-f5c0-4e9f-a0df-7dc7937527f2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0a9593ee-a1f0-4871-8dc6-a611c7649679"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0ddc6cf-c974-4f60-9eed-98a3e6429a5b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""NextPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c44aa32e-32bf-4a41-868c-3b55d2a81f01"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""NextPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18effe11-b495-4013-bbfb-52b887d36fc5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""PrevPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""611830bf-7140-46a2-b047-5aee5ac0bd59"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""PrevPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33c46114-bc5a-4040-aadd-52fa1b837dd3"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Apply"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26eba4d5-21e1-4978-91a4-fd74a4873be3"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Apply"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6e319a1-baa1-4b6c-97cf-991cbcb56b7a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e82f197-ea9f-4bba-b232-8b9b88b32623"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e5eda46-e711-4453-a844-95cef25572cc"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Action1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0d043bb-075c-42d6-a307-5f6a7d5d1147"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Action1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3bfc79a-45b6-4ed7-80e3-8204c6fd6522"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Action2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6463c929-7347-42a6-a310-7f9f2161e78b"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Action2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dungeon"",
            ""id"": ""ca3f5c58-afe9-455e-a815-5d1fec9d7f74"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""1650d0bc-67d0-42d9-b448-f753ac04fe4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeaponNext"",
                    ""type"": ""Button"",
                    ""id"": ""62dcdb90-8f1e-4347-bac6-b6d8a2ea8b2e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeaponPrev"",
                    ""type"": ""Button"",
                    ""id"": ""db7b43ac-d9f7-4368-85c5-d0d38364b293"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c3edb657-d13c-4528-9b13-906f5f1e532a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""111b877b-335b-4cd7-8973-9159bdc144d1"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""WeaponNext"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d0a0087-7d0d-4daf-af97-7518f708cfa2"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""WeaponPrev"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Kitchen"",
            ""id"": ""a4e5af7d-2a74-423c-9d2b-bbb5afe84675"",
            ""actions"": [
                {
                    ""name"": ""HotkeyKitchen"",
                    ""type"": ""Button"",
                    ""id"": ""17a4b4c9-fe10-4b3a-9043-3d129aed0025"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HotkeyDisplay"",
                    ""type"": ""Button"",
                    ""id"": ""b23b725f-5103-4e0f-aa42-16df02a2020c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HotkeyClean"",
                    ""type"": ""Button"",
                    ""id"": ""da395be5-6273-46e6-a94b-146c782853d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""72ad7ad3-f7ea-403b-821c-1be105f38e4c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""HotkeyKitchen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""774e2527-c874-409b-bed2-efdebdb6d7f1"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""HotkeyKitchen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""188d9e4d-6d15-4521-997a-5b42f10bd411"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""HotkeyDisplay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""568fade8-b43b-453f-92b5-28dda804cbe9"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""HotkeyDisplay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fafad730-b663-4c76-8465-f5f2a5b6b8ad"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""HotkeyClean"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79b88fd0-6468-4b36-8ce7-eb7a5563f7d3"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""HotkeyClean"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<VirtualMouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<VirtualMouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_MouseClick = m_Player.FindAction("MouseClick", throwIfNotFound: true);
        m_Player_MousePosition = m_Player.FindAction("MousePosition", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_Inventory = m_Player.FindAction("Inventory", throwIfNotFound: true);
        m_Player_Pause = m_Player.FindAction("Pause", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Navigate = m_UI.FindAction("Navigate", throwIfNotFound: true);
        m_UI_NextPage = m_UI.FindAction("NextPage", throwIfNotFound: true);
        m_UI_PrevPage = m_UI.FindAction("PrevPage", throwIfNotFound: true);
        m_UI_Apply = m_UI.FindAction("Apply", throwIfNotFound: true);
        m_UI_Cancel = m_UI.FindAction("Cancel", throwIfNotFound: true);
        m_UI_Action1 = m_UI.FindAction("Action1", throwIfNotFound: true);
        m_UI_Action2 = m_UI.FindAction("Action2", throwIfNotFound: true);
        // Dungeon
        m_Dungeon = asset.FindActionMap("Dungeon", throwIfNotFound: true);
        m_Dungeon_Attack = m_Dungeon.FindAction("Attack", throwIfNotFound: true);
        m_Dungeon_WeaponNext = m_Dungeon.FindAction("WeaponNext", throwIfNotFound: true);
        m_Dungeon_WeaponPrev = m_Dungeon.FindAction("WeaponPrev", throwIfNotFound: true);
        // Kitchen
        m_Kitchen = asset.FindActionMap("Kitchen", throwIfNotFound: true);
        m_Kitchen_HotkeyKitchen = m_Kitchen.FindAction("HotkeyKitchen", throwIfNotFound: true);
        m_Kitchen_HotkeyDisplay = m_Kitchen.FindAction("HotkeyDisplay", throwIfNotFound: true);
        m_Kitchen_HotkeyClean = m_Kitchen.FindAction("HotkeyClean", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_MouseClick;
    private readonly InputAction m_Player_MousePosition;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_Inventory;
    private readonly InputAction m_Player_Pause;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseClick => m_Wrapper.m_Player_MouseClick;
        public InputAction @MousePosition => m_Wrapper.m_Player_MousePosition;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @Inventory => m_Wrapper.m_Player_Inventory;
        public InputAction @Pause => m_Wrapper.m_Player_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @MouseClick.started += instance.OnMouseClick;
            @MouseClick.performed += instance.OnMouseClick;
            @MouseClick.canceled += instance.OnMouseClick;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @MouseClick.started -= instance.OnMouseClick;
            @MouseClick.performed -= instance.OnMouseClick;
            @MouseClick.canceled -= instance.OnMouseClick;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Navigate;
    private readonly InputAction m_UI_NextPage;
    private readonly InputAction m_UI_PrevPage;
    private readonly InputAction m_UI_Apply;
    private readonly InputAction m_UI_Cancel;
    private readonly InputAction m_UI_Action1;
    private readonly InputAction m_UI_Action2;
    public struct UIActions
    {
        private @PlayerInput m_Wrapper;
        public UIActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Navigate => m_Wrapper.m_UI_Navigate;
        public InputAction @NextPage => m_Wrapper.m_UI_NextPage;
        public InputAction @PrevPage => m_Wrapper.m_UI_PrevPage;
        public InputAction @Apply => m_Wrapper.m_UI_Apply;
        public InputAction @Cancel => m_Wrapper.m_UI_Cancel;
        public InputAction @Action1 => m_Wrapper.m_UI_Action1;
        public InputAction @Action2 => m_Wrapper.m_UI_Action2;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Navigate.started += instance.OnNavigate;
            @Navigate.performed += instance.OnNavigate;
            @Navigate.canceled += instance.OnNavigate;
            @NextPage.started += instance.OnNextPage;
            @NextPage.performed += instance.OnNextPage;
            @NextPage.canceled += instance.OnNextPage;
            @PrevPage.started += instance.OnPrevPage;
            @PrevPage.performed += instance.OnPrevPage;
            @PrevPage.canceled += instance.OnPrevPage;
            @Apply.started += instance.OnApply;
            @Apply.performed += instance.OnApply;
            @Apply.canceled += instance.OnApply;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
            @Action1.started += instance.OnAction1;
            @Action1.performed += instance.OnAction1;
            @Action1.canceled += instance.OnAction1;
            @Action2.started += instance.OnAction2;
            @Action2.performed += instance.OnAction2;
            @Action2.canceled += instance.OnAction2;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Navigate.started -= instance.OnNavigate;
            @Navigate.performed -= instance.OnNavigate;
            @Navigate.canceled -= instance.OnNavigate;
            @NextPage.started -= instance.OnNextPage;
            @NextPage.performed -= instance.OnNextPage;
            @NextPage.canceled -= instance.OnNextPage;
            @PrevPage.started -= instance.OnPrevPage;
            @PrevPage.performed -= instance.OnPrevPage;
            @PrevPage.canceled -= instance.OnPrevPage;
            @Apply.started -= instance.OnApply;
            @Apply.performed -= instance.OnApply;
            @Apply.canceled -= instance.OnApply;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
            @Action1.started -= instance.OnAction1;
            @Action1.performed -= instance.OnAction1;
            @Action1.canceled -= instance.OnAction1;
            @Action2.started -= instance.OnAction2;
            @Action2.performed -= instance.OnAction2;
            @Action2.canceled -= instance.OnAction2;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // Dungeon
    private readonly InputActionMap m_Dungeon;
    private List<IDungeonActions> m_DungeonActionsCallbackInterfaces = new List<IDungeonActions>();
    private readonly InputAction m_Dungeon_Attack;
    private readonly InputAction m_Dungeon_WeaponNext;
    private readonly InputAction m_Dungeon_WeaponPrev;
    public struct DungeonActions
    {
        private @PlayerInput m_Wrapper;
        public DungeonActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Dungeon_Attack;
        public InputAction @WeaponNext => m_Wrapper.m_Dungeon_WeaponNext;
        public InputAction @WeaponPrev => m_Wrapper.m_Dungeon_WeaponPrev;
        public InputActionMap Get() { return m_Wrapper.m_Dungeon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DungeonActions set) { return set.Get(); }
        public void AddCallbacks(IDungeonActions instance)
        {
            if (instance == null || m_Wrapper.m_DungeonActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DungeonActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @WeaponNext.started += instance.OnWeaponNext;
            @WeaponNext.performed += instance.OnWeaponNext;
            @WeaponNext.canceled += instance.OnWeaponNext;
            @WeaponPrev.started += instance.OnWeaponPrev;
            @WeaponPrev.performed += instance.OnWeaponPrev;
            @WeaponPrev.canceled += instance.OnWeaponPrev;
        }

        private void UnregisterCallbacks(IDungeonActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @WeaponNext.started -= instance.OnWeaponNext;
            @WeaponNext.performed -= instance.OnWeaponNext;
            @WeaponNext.canceled -= instance.OnWeaponNext;
            @WeaponPrev.started -= instance.OnWeaponPrev;
            @WeaponPrev.performed -= instance.OnWeaponPrev;
            @WeaponPrev.canceled -= instance.OnWeaponPrev;
        }

        public void RemoveCallbacks(IDungeonActions instance)
        {
            if (m_Wrapper.m_DungeonActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDungeonActions instance)
        {
            foreach (var item in m_Wrapper.m_DungeonActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DungeonActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DungeonActions @Dungeon => new DungeonActions(this);

    // Kitchen
    private readonly InputActionMap m_Kitchen;
    private List<IKitchenActions> m_KitchenActionsCallbackInterfaces = new List<IKitchenActions>();
    private readonly InputAction m_Kitchen_HotkeyKitchen;
    private readonly InputAction m_Kitchen_HotkeyDisplay;
    private readonly InputAction m_Kitchen_HotkeyClean;
    public struct KitchenActions
    {
        private @PlayerInput m_Wrapper;
        public KitchenActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @HotkeyKitchen => m_Wrapper.m_Kitchen_HotkeyKitchen;
        public InputAction @HotkeyDisplay => m_Wrapper.m_Kitchen_HotkeyDisplay;
        public InputAction @HotkeyClean => m_Wrapper.m_Kitchen_HotkeyClean;
        public InputActionMap Get() { return m_Wrapper.m_Kitchen; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KitchenActions set) { return set.Get(); }
        public void AddCallbacks(IKitchenActions instance)
        {
            if (instance == null || m_Wrapper.m_KitchenActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KitchenActionsCallbackInterfaces.Add(instance);
            @HotkeyKitchen.started += instance.OnHotkeyKitchen;
            @HotkeyKitchen.performed += instance.OnHotkeyKitchen;
            @HotkeyKitchen.canceled += instance.OnHotkeyKitchen;
            @HotkeyDisplay.started += instance.OnHotkeyDisplay;
            @HotkeyDisplay.performed += instance.OnHotkeyDisplay;
            @HotkeyDisplay.canceled += instance.OnHotkeyDisplay;
            @HotkeyClean.started += instance.OnHotkeyClean;
            @HotkeyClean.performed += instance.OnHotkeyClean;
            @HotkeyClean.canceled += instance.OnHotkeyClean;
        }

        private void UnregisterCallbacks(IKitchenActions instance)
        {
            @HotkeyKitchen.started -= instance.OnHotkeyKitchen;
            @HotkeyKitchen.performed -= instance.OnHotkeyKitchen;
            @HotkeyKitchen.canceled -= instance.OnHotkeyKitchen;
            @HotkeyDisplay.started -= instance.OnHotkeyDisplay;
            @HotkeyDisplay.performed -= instance.OnHotkeyDisplay;
            @HotkeyDisplay.canceled -= instance.OnHotkeyDisplay;
            @HotkeyClean.started -= instance.OnHotkeyClean;
            @HotkeyClean.performed -= instance.OnHotkeyClean;
            @HotkeyClean.canceled -= instance.OnHotkeyClean;
        }

        public void RemoveCallbacks(IKitchenActions instance)
        {
            if (m_Wrapper.m_KitchenActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKitchenActions instance)
        {
            foreach (var item in m_Wrapper.m_KitchenActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KitchenActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KitchenActions @Kitchen => new KitchenActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMouseClick(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnNavigate(InputAction.CallbackContext context);
        void OnNextPage(InputAction.CallbackContext context);
        void OnPrevPage(InputAction.CallbackContext context);
        void OnApply(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnAction1(InputAction.CallbackContext context);
        void OnAction2(InputAction.CallbackContext context);
    }
    public interface IDungeonActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnWeaponNext(InputAction.CallbackContext context);
        void OnWeaponPrev(InputAction.CallbackContext context);
    }
    public interface IKitchenActions
    {
        void OnHotkeyKitchen(InputAction.CallbackContext context);
        void OnHotkeyDisplay(InputAction.CallbackContext context);
        void OnHotkeyClean(InputAction.CallbackContext context);
    }
}
